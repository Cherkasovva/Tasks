<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
                    xmlns:local="clr-namespace:Tasks.Themes" >
    <!-- Стиль для кнопки -->
    <Style TargetType="Button" x:Key="CustomButtonStyle">
        <Setter Property="FontSize" Value="14" />
        <Setter Property="FontFamily" Value="Arial" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="Background" Value="LightGray" />
        <Setter Property="Padding" Value="10,5" />
        <Setter Property="Margin" Value="5" />
        <Setter Property="BorderBrush" Value="DarkGray" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <!-- Свойство Setter.Value задает значение для свойства, указанного в Setter Property -->
            <Setter.Value>
                <!-- Переопределение внешнего вида кнопки -->
                <ControlTemplate TargetType="Button"> 
                    <Border Background="{TemplateBinding Background}" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            CornerRadius="5">
                        <!-- Содержимое кнопки -->
                        <ContentPresenter HorizontalAlignment="Center" 
                                          VerticalAlignment="Center" 
                                          TextBlock.FontSize="{TemplateBinding FontSize}" 
                                          TextBlock.Foreground="{TemplateBinding Foreground}" /> 
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    
    <!-- Стиль для кнопки с изображением -->
    <Style TargetType="Button" x:Key="ImageButtonStyle">
        <!-- Template — это свойство элемента управления, 
        которое отвечает за его внешний вид и структуру
        Настройка Template элемента управления через шаблон ControlTemplate -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <!-- Картинка 
                        Свойство Source указывает путь к изображению 
                        Используется TemplateBinding, чтобы связать свойство Tag 
                        элемента управления (Button) с источником изображения -->
                        <Image Source="C:\Users\nasty\source\repos\Tasks\Tasks\Image\Image.png" 
                               RenderTransformOrigin="0.5,0.5">
                            <!-- RenderTransform: Позволяет изменить, как изображение отображается, 
                            без изменения его фактического размера или исходных данных.
                            В данном случае это используется для масштабирования изображения.-->                           
                            <Image.RenderTransform>
                                <!-- ScaleTransform: Задаёт масштабирование изображения по осям X и Y -->
                                <ScaleTransform ScaleX="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(local:ImageButtonExtensions.xScale)}"
                                                ScaleY="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(local:ImageButtonExtensions.yScale)}" />
                            </Image.RenderTransform>
                        </Image>
                        <!-- Содержимое кнопки -->
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    
    <!-- Стиль для ScrollViewer -->
    <Style x:Key="CustomScrollViewerStyle" TargetType="ScrollViewer">
        <Style.Resources>
            <!-- Стиль для вертикального ScrollBar -->
            <Style TargetType="ScrollBar" x:Key="VerticalScrollBarStyle">
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource AncestorType=ScrollViewer}, Path=(local:ScrollViewerHelper.VerticalScrollColor)}" />
                <!-- {RelativeSource AncestorType=ScrollViewer} 
                Указывает, что привязка ищет свойство (VerticalScrollColor или VerticalThumbColor) 
                в родительском элементе типа ScrollViewer -->
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType=ScrollViewer}, Path=(local:ScrollViewerHelper.VerticalThumbColor)}" />
            </Style>

            <!-- Стиль для горизонтального ScrollBar -->
            <Style TargetType="ScrollBar" x:Key="HorizontalScrollBarStyle">
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource AncestorType=ScrollViewer}, Path=(local:ScrollViewerHelper.HorizontalScrollColor)}" />
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType=ScrollViewer}, Path=(local:ScrollViewerHelper.HorizontalThumbColor)}" />
            </Style>
        </Style.Resources>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ScrollViewer">
                    <Grid>
                        <!-- Контент -->
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>

                        <!-- Основное содержимое -->
                        <ScrollContentPresenter Grid.Row="0" Grid.Column="0" />

                        <!-- Вертикальный ScrollBar -->
                        <ScrollBar Grid.Row="0" Grid.Column="1" 
                                      Style="{StaticResource VerticalScrollBarStyle}" 
                                      Orientation="Vertical" 
                                      Maximum="{TemplateBinding ScrollableHeight}" 
                                      ViewportSize="{TemplateBinding ViewportHeight}" 
                                      Value="{TemplateBinding VerticalOffset}" />

                        <!-- Горизонтальный ScrollBar -->
                        <ScrollBar Grid.Row="1" Grid.Column="0" 
                                      Style="{StaticResource HorizontalScrollBarStyle}" 
                                      Orientation="Horizontal" 
                                      Maximum="{TemplateBinding ScrollableWidth}" 
                                      ViewportSize="{TemplateBinding ViewportWidth}" 
                                      Value="{TemplateBinding HorizontalOffset}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
</ResourceDictionary>

